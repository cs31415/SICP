(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((< (car set1) (car set2))
         (cons (car set1) (union-set (cdr set1) set2)))
        ((< (car set2) (car set1))
         (cons (car set2) (union-set set1 (cdr set2))))
        (else (cons (car set1) 
                    (union-set (cdr set1) (cdr set2))))))  

(define set1 (list 1 1 2 3 4))
(define set2 (list 2 4 4 5 6))
(union-set set1 set2)
;(1 2 3 4 5 6)

(define set1 (list 1 2 3 4))
(define set2 (list 1 2 4 5 6))
(union-set set1 set2)
;(1 2 3 4 5 6)

(define set1 (list 3 4 7 8))
(define set2 (list 2 4 5 6))
(union-set set1 set2)
;(2 3 4 5 6 7 8)

(define set1 ())
(define set2 (list 2 4 5 6))
(union-set set1 set2)
;(2 4 5 6)

(define set1 (list 3 4 7 8))
(define set2 ())
(union-set set1 set2)
;(3 4 7 8)

(define set1 ())
(define set2 ())
(union-set set1 set2)
;()
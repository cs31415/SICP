(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

;Theta(n)
(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

;Theta(n)
(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))


;try-union-set is Theta(n)
;tree->list is called twice and list->tree once per call to union-set
;Thus, union-set is Theta(n)
(define (union-set tset1 tset2)
  (let ((set1 (tree->list tset1))
        (set2 (tree->list tset2)))
    (define (try-union-set set1 set2)
      (cond ((null? set1) set2)
            ((null? set2) set1)
            ((< (car set1) (car set2))
             (cons (car set1) (try-union-set (cdr set1) set2)))
            ((< (car set2) (car set1))
             (cons (car set2) (try-union-set set1 (cdr set2))))
            (else (cons (car set1) 
                        (try-union-set (cdr set1) (cdr set2))))))
    (list->tree (try-union-set set1 set2))))


(define set1 (list->tree (list 3 4 7 8)))
(define set2 (list->tree (list 2 4 5 6)))
(union-set set1 set2)
(tree->list (union-set set1 set2))
;(2 3 4 5 6 7 8)

;Theta(n)
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

;try-intersection-set is Theta(n) 
;Therefore, intersection-set is also Theta(n)
;Caveat: tset1 and tset2 are ordered binary trees where the left
;branch always contains lower values and right branch always 
;contains higher values.
(define (intersection-set tset1 tset2)
  (let ((set1 (tree->list tset1))
        (set2 (tree->list tset2)))
    (define (try-intersection-set set1 set2)
      (if (or (null? set1) (null? set2))
          '()    
          (let ((x1 (car set1)) (x2 (car set2)))
            (cond ((= x1 x2)
                   (cons x1
                         (try-intersection-set (cdr set1)
                                           (cdr set2))))
                  ((< x1 x2)
                   (try-intersection-set (cdr set1) set2))
                  ((< x2 x1)
                   (try-intersection-set set1 (cdr set2)))))))
    (list->tree (try-intersection-set set1 set2))))

(intersection-set set1 set2)
;(4 () ())

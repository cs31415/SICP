(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

; union s1 s2 = s2 + all of s1 not in s2
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((not (element-of-set? (car set1) set2)) 
         (cons (car set1) (union-set (cdr set1) set2)))
        (else (union-set (cdr set1) set2))))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)        
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))

(define set1 (list 1 2 3 4))
(define set2 (list 3 4 5 6))
(union-set set1 set2)
;(1 2 3 4 5 6)
(intersection-set set1 set2)
;(3 4)

(define set1 (list 1 2 3))
(define set2 (list 4 5 6))
(union-set set1 set2)
;(1 2 3 4 5 6)
(intersection-set set1 set2)
;()

(define set1 (list 1 1 2 3 4))
(define set2 (list 2 4 4 5 6))
(union-set set1 set2)
